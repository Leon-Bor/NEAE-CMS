.dnd{

	/***************************** Required styles *****************************/

	/**
	 * For the correct positioning of the placeholder element, the dnd-list and
	 * it's children must have position: relative
	 */
	 ul[dnd-list],
	 ul[dnd-list] > li {
		position: relative;
	}

	.dnd-info{
		text-align: center;
		margin-top: 15px;
	}

	.menu-bar{
		width: 100%;
		min-height: 25px;

		h5{
			display: inline;
			margin-top: 10px;
		}

		.close-btn{
			cursor: pointer;
			margin: 5px;
			right: 0px;
			float: right;
			text-align: right;
			z-index: 10;

			&:hover{
				color: white;
			}
		}
	}


	.bs-container{

		li{
			background-color: rgba(255,255,255,0.33);
			list-style: none;
			margin-top: 10px;
			padding-bottom: 10px;
			&.child-container{
				padding-right: 10px;
				padding-left: 10px;
			}
		}
		.dndPlaceholder {
		    background-color: #ddd !important;
		    min-height: 42px;
		    display: block;
		    position: relative;
		}

	}

	.bs-row{
		li{
			background-color: rgba(0,0,0,0.5);
			list-style: none;
			border-radius: 3px;
			&.child-row{
				padding-left: 10px;
				padding-right: 10px;
			}
		}
		.dndPlaceholder {
		    background-color: #ddd !important;
		    min-height: 42px;
		    display: block;
		    position: relative;
		}

	}

	.bs-col{
		li{
			background-color: rgba(42,159,214,0.5);
			color: #fff;
			float: left;
			font-weight: 700;
			margin: 0px;
			height: 50px;
			padding: 3px;
			text-align: center;
			border: 1px solid rgba(0,0,0,0.5);
			border-radius: 3px;
			list-style: none;
		}
		.dndPlaceholder {
		    background-color: #ddd !important;
		    min-height: 42px;
		    width: 33%;
		    display: block;
		    position: relative;
		}
	}


		/***************************** Dropzone Styling *****************************/

		/**
		 * The dnd-list should always have a min-height,
		 * otherwise you can't drop to it once it's empty
		 */
		ul[dnd-list] {
		    min-height: 42px;
		    margin: 0px;
		    padding-left: 0px;
		    padding-right: 0px;
		}

		/**
		 * The dnd-lists's child elements currently MUST have
		 * position: relative. Otherwise we can not determine
		 * whether the mouse pointer is in the upper or lower
		 * half of the element we are dragging over. In other
		 * browsers we can use event.offsetY for this.
		 */
		li {
		    display: block;
		}

		/**
		 * Reduce opacity of elements during the drag operation. This allows the user
		 * to see where he is dropping his element, even if the element is huge. The
		 * .dndDragging class is automatically set during the drag operation.
		 */
		.dndDragging {
		    opacity: 0.7;
		}

		/**
		 * The dndDraggingSource class will be applied to the source element of a drag
		 * operation. It makes sense to hide it to give the user the feeling that he's
		 * actually moving it. Note that the source element has also .dndDragging class.
		 */
		.dndDraggingSource {
		    display: none;
		}

		/**
		 * An element with .dndPlaceholder class will be added as child of the dnd-list
		 * while the user is dragging over it.
		 */

}

.dnd-nav{
		/**
	 * For the correct positioning of the placeholder element, the dnd-list and
	 * it's children must have position: relative
	 */
	ul[dnd-list],
	ul[dnd-list] > li {
	  position: relative;
	}

	/**
	 * The dnd-list should always have a min-height,
	 * otherwise you can't drop to it once it's empty
	 */
	ul[dnd-list] {
	  min-height: 42px;
	  padding-left: 0px;
	}

	/**
	 * The dndDraggingSource class will be applied to
	 * the source element of a drag operation. It makes
	 * sense to hide it to give the user the feeling
	 * that he's actually moving it.
	 */
	ul[dnd-list] .dndDraggingSource {
	  display: none;
	}

	/**
	 * An element with .dndPlaceholder class will be
	 * added to the dnd-list while the user is dragging
	 * over it.
	 */
	ul[dnd-list] .dndPlaceholder {
	  display: block;
	  background-color: #ddd;
	  padding: 10px 15px;
	  min-height: 42px;
	}

	/**
	 * The dnd-lists's child elements currently MUST have
	 * position: relative. Otherwise we can not determine
	 * whether the mouse pointer is in the upper or lower
	 * half of the element we are dragging over. In other
	 * browsers we can use event.offsetY for this.
	 */
	ul[dnd-list] li {
	  background-color: rgba(51, 134, 183, 0.6);;
	  border: 1px solid #ddd;
	  border-top-right-radius: 4px;
	  border-top-left-radius: 4px;
	  display: block;
	  margin-bottom: 5px;

	  /* Disable text selection if item is not draggable */
	  -webkit-touch-callout: none;
	  -webkit-user-select: none;
	  -khtml-user-select: none;
	  -moz-user-select: none;
	  -ms-user-select: none;
	  user-select: none;
	}

	ul[dnd-list] li dnd-nodrag {
	  display: block;
	  padding: 10px 15px;
	}

	/**
	 * Gender-specifc background
	 */
	ul[dnd-list] li.background-man {
	  background-color: #CAE0FC;
	}

	ul[dnd-list] li.background-woman {
	  background-color: #FFE2F5;
	}

	ul[dnd-list] input.background-man {
	  background-color: #D8E9FF;
	  color: #2F4D99;
	}

	ul[dnd-list] input.background-woman {
	  background-color: #FFF0FA;
	  color: #D84FA7;
	}

	/**
	 * Handle positioning
	 */
	.handle {
	  cursor: move;
	  position: absolute;
	  top: 14px;
	}

	.name {
	  margin-left: 20px;
	}

	.dropdown-element{
		margin: 5px;
		margin-left: 35px;

	}
}
